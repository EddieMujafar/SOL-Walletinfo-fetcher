import React, { useState } from 'react';
import { createSolanaRpc, address } from '@solana/web3.js';
import './App.css';  // Import the CSS file

function App() {
  const [walletAddress, setWalletAddress] = useState('');
  const [balance, setBalance] = useState(null);
  const [transactions, setTransactions] = useState([]);

  const rpc = createSolanaRpc('https://api.devnet.solana.com');

  const fetchWalletInfo = async () => {
    try {
      console.log('Fetching wallet info...');
      
      // Fetching wallet balance
      const { value: lamports } = await rpc
        .getBalance(address(walletAddress))
        .send();
      const solBalance = Number(lamports) / 1e9;  // Explicitly convert BigInt to Number
      setBalance(solBalance);  // Update the state with balance

      // Fetching last 10 transactions
      const txs = await rpc.getConfirmedSignaturesForAddress2(address(walletAddress), { limit: 10 }).send();
      const detailedTxs = await Promise.all(
        txs.map(async (tx) => {
          const details = await rpc.getTransaction(tx.signature, { commitment: "confirmed" }).send();
          return {
            signature: tx.signature,
            blockTime: tx.blockTime ? new Date(tx.blockTime * 1000).toLocaleString() : 'N/A',
            amount: details?.meta?.preBalances && details?.meta?.postBalances ? 
                    (Number(details.meta.preBalances[0] - details.meta.postBalances[0]) / 1e9).toFixed(6) : 'N/A',
            status: details?.meta?.err ? 'Failed' : 'Success'
          };
        })
      );
      setTransactions(detailedTxs);
    } catch (error) {
      console.error('Error fetching wallet info:', error);
    }
  };

  return (
    <div>
      <h1><p style={{ color: 'green' }}>ACCOUNT GEN<span className="flaming-i">I</span>E</p></h1>
      <input
        type="text"
        placeholder="Enter Solana Wallet Address"
        value={walletAddress}
        onChange={(e) => setWalletAddress(e.target.value)}
        className="input-address"
      />

      <button className="button-animated" onClick={fetchWalletInfo}>
        <p style={{ color: 'black' }}>Access Wallet Info</p>
      </button>

      <p style={{ color: '#666', fontSize: '14px', marginTop: '10px' }}>
        Please enter a valid Solana wallet address to fetch the wallet information.
      </p>

      {balance !== null && (
        <div>
          <h2>Balance: {balance} SOL</h2>
        </div>
      )}

      {transactions.length > 0 && (
        <div>
          <h3>Last 10 Transactions:</h3>
          <table>
            <thead>
              <tr>
                <th>Transaction Signature</th>
                <th>Timestamp</th>
                <th>Amount (SOL)</th>
                <th>Status</th>
              </tr>
            </thead>
            <tbody>
              {transactions.map((tx, index) => (
                <tr key={index}>
                  <td>
                    <a
                      href={`https://explorer.solana.com/tx/${tx.signature}`}
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      {tx.signature}
                    </a>
                  </td>
                  <td>{tx.blockTime}</td>
                  <td>{tx.amount}</td>
                  <td>{tx.status}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}

export default App;
